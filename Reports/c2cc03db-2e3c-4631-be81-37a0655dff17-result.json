{"name": "test_register_with_mandate_fields", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input type=\"checkbox\" name=\"agree\" value=\"1\"> is not clickable at point (945, 513). Other element would receive the click: <li>...</li>\n  (Session info: chrome=138.0.7204.183)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7922ce415+77285]\n\tGetHandleVerifier [0x0x7ff7922ce470+77376]\n\t(No symbol) [0x0x7ff792099a6a]\n\t(No symbol) [0x0x7ff7920f83e9]\n\t(No symbol) [0x0x7ff7920f5d8b]\n\t(No symbol) [0x0x7ff7920f2dd1]\n\t(No symbol) [0x0x7ff7920f1ce1]\n\t(No symbol) [0x0x7ff7920e3804]\n\t(No symbol) [0x0x7ff79211860a]\n\t(No symbol) [0x0x7ff7920e2d06]\n\t(No symbol) [0x0x7ff792118820]\n\t(No symbol) [0x0x7ff79214087f]\n\t(No symbol) [0x0x7ff7921183e3]\n\t(No symbol) [0x0x7ff7920e1521]\n\t(No symbol) [0x0x7ff7920e22b3]\n\tGetHandleVerifier [0x0x7ff7925b1efd+3107021]\n\tGetHandleVerifier [0x0x7ff7925ac29d+3083373]\n\tGetHandleVerifier [0x0x7ff7925cbedd+3213485]\n\tGetHandleVerifier [0x0x7ff7922e884e+184862]\n\tGetHandleVerifier [0x0x7ff7922f055f+216879]\n\tGetHandleVerifier [0x0x7ff7922d7084+113236]\n\tGetHandleVerifier [0x0x7ff7922d7239+113673]\n\tGetHandleVerifier [0x0x7ff7922be298+11368]\n\tBaseThreadInitThunk [0x0x7ffdf297e8d7+23]\n\tRtlUserThreadStart [0x0x7ffdf3a5c34c+44]", "trace": "self = <Tests.test_register.TestRegister object at 0x000001C14BE8F4D0>\n\n    def test_register_with_mandate_fields(self):\n        home_page = HomePage(self.driver)\n        home_page.click_on_my_account_dropdown()\n        register_page = home_page.click_on_register_option()\n>       account_success_page = register_page.enter_all_fields_to_register(\"baddika\", \"Surya\", self.timestamp_email_generator(), \"1234567890\", \"123456\", \"123456\")\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTests\\test_register.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\RegisterPage.py:55: in enter_all_fields_to_register\n    self.click_on_the_check_box_field()\npages\\RegisterPage.py:40: in click_on_the_check_box_field\n    self.click_on_element(\"check_box_field_XPATH\",self.check_box_field_XPATH)\npages\\BasePage.py:25: in click_on_element\n    element.click()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C14BF5E5D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff7922be298+11368]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffdf297e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdf3a5c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input type=\"checkbox\" name=\"agree\" value=\"1\"> is not clickable at point (945, 513). Other element would receive the click: <li>...</li>\nE         (Session info: chrome=138.0.7204.183)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7922ce415+77285]\nE       \tGetHandleVerifier [0x0x7ff7922ce470+77376]\nE       \t(No symbol) [0x0x7ff792099a6a]\nE       \t(No symbol) [0x0x7ff7920f83e9]\nE       \t(No symbol) [0x0x7ff7920f5d8b]\nE       \t(No symbol) [0x0x7ff7920f2dd1]\nE       \t(No symbol) [0x0x7ff7920f1ce1]\nE       \t(No symbol) [0x0x7ff7920e3804]\nE       \t(No symbol) [0x0x7ff79211860a]\nE       \t(No symbol) [0x0x7ff7920e2d06]\nE       \t(No symbol) [0x0x7ff792118820]\nE       \t(No symbol) [0x0x7ff79214087f]\nE       \t(No symbol) [0x0x7ff7921183e3]\nE       \t(No symbol) [0x0x7ff7920e1521]\nE       \t(No symbol) [0x0x7ff7920e22b3]\nE       \tGetHandleVerifier [0x0x7ff7925b1efd+3107021]\nE       \tGetHandleVerifier [0x0x7ff7925ac29d+3083373]\nE       \tGetHandleVerifier [0x0x7ff7925cbedd+3213485]\nE       \tGetHandleVerifier [0x0x7ff7922e884e+184862]\nE       \tGetHandleVerifier [0x0x7ff7922f055f+216879]\nE       \tGetHandleVerifier [0x0x7ff7922d7084+113236]\nE       \tGetHandleVerifier [0x0x7ff7922d7239+113673]\nE       \tGetHandleVerifier [0x0x7ff7922be298+11368]\nE       \tBaseThreadInitThunk [0x0x7ffdf297e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffdf3a5c34c+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "start": 1753893933965, "stop": 1753893937373, "uuid": "7452d316-0beb-429f-b278-bfb7b8aaece7", "historyId": "1e9c4fc4ee89d8f78d86633950851560", "testCaseId": "1e9c4fc4ee89d8f78d86633950851560", "fullName": "Tests.test_register.TestRegister#test_register_with_mandate_fields", "labels": [{"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_register"}, {"name": "subSuite", "value": "TestRegister"}, {"name": "host", "value": "MSI"}, {"name": "thread", "value": "11176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_register"}], "titlePath": ["Tests", "test_register.py", "TestRegister"]}